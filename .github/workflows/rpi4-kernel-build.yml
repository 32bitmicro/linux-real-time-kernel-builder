# This is a callable workflow for the RPI4 RT kernel build. It is based on the Dockerfile located in the repo
# Workflow can be started from another workflow
# The build takes 1.5 hours and artifacts are available under workflow artifacts
#  - kernel .deb packages
# TODO:
#  - use Dockerfile instead
#  - create Docker image and push it to the packages

name: 'RPI4 RT Kernel build'

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      uname_r:
        description: 'raspi release in a form of <5.4.0-1058-raspi>'
        default: ''
        required: false
        type: string
      rt_patch:
        description: 'RT patch in a form of <5.4.177-rt69>'
        default: ''
        required: false
        type: string
      kernel_version:
        description: 'Raspi kernel version'
        default: '5.4.0'
        required: false
        type: string
      ubuntu_version:
        description: 'Ubuntu version'
        default: 'focal'
        required: false
        type: string
      lttng_version:
        description: 'LTTNG version'
        default: '2.12'
        required: false
        type: string
env:
  ARCH: arm64
  triple: aarch64-linux-gnu
  KERNEL_DIR: linux-raspi

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # Use Ubuntu 20.04 runner
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Get available space
        # We need at least 20GB to build kernel plus some space for the dependencies
        run: |
          cd /
          df -H

      - name: Get a list of the installed packages
        # We might probably delete some of them to increase free space
        run: |
          sudo apt-get update
          apt list --installed

      - name: Increase free space
        # Remove Android and dotnet
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          ls /usr/local/

      - name: Get available size (again)
        run: |
          cd /
          df -H

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -q -y tzdata apt-utils lsb-release software-properties-common
          sudo rm -rf /var/lib/apt/lists/*

      - name: Setup ARCH repos
        run: |
          sudo apt-get update
          sudo apt-get install -q -y gcc-${triple}
          sudo dpkg --add-architecture ${ARCH}
          sudo sed -i 's/deb h/deb [arch=amd64] h/g' /etc/apt/sources.list
          sudo add-apt-repository -n -s "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -s -c) main universe restricted"
          sudo add-apt-repository -n -s "deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports $(lsb_release -s -c)-updates main universe restricted"
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install extra packages needed for the patch handling
        run: |
          sudo apt-get update
          sudo apt-get install -q -y wget curl gzip
          sudo rm -rf /var/lib/apt/lists/*

      - name: Setup uname_r
        run: |
         UNAME_R=${{ inputs.uname_r }}
         if test -z $UNAME_R; then UNAME_R=`curl -s http://ports.ubuntu.com/pool/main/l/linux-raspi/ | grep linux-buildinfo | grep -o -P '(?<=<a href=").*(?=">l)' | grep ${ARCH} | grep ${{ inputs.kernel_version }} | sort | tail -n 1 | cut -d '-' -f 3-4`-raspi; fi \
         && echo $UNAME_R > $HOME/uname_r

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get build-dep -q -y linux
          sudo apt-get install -q -y \
          libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf fakeroot
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install linux sources
        run: |
          mkdir $HOME/linux_build && cd $HOME/linux_build \
          && time git clone -b master --single-branch https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux-raspi/+git/${{ inputs.ubuntu_version }} ${KERNEL_DIR} \
          && cd ${KERNEL_DIR} \
          && git fetch --tag

      - name: checkout necessary tag
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && git tag -l *`cat $HOME/uname_r | cut -d '-' -f 2`* | sort -V | tail -1 > $HOME/linux_build/tag \
          && git checkout `cat $HOME/linux_build/tag`

      - name: Retrieve buildinfo
        run: |
          # install buildinfo to retrieve `raspi` kernel config
          cd $HOME \
          && wget http://ports.ubuntu.com/pool/main/l/linux-raspi/linux-buildinfo-${{ inputs.kernel_version }}-`cat $HOME/uname_r | cut -d '-' -f 2`-raspi_${{ inputs.kernel_version }}-`cat $HOME/linux_build/tag | cut -d '-' -f 4`_${ARCH}.deb \
          && dpkg -X *.deb $HOME

      - name: Get the nearest RT patch to the kernel SUBLEVEL
        run: |
          cd $HOME/linux_build/${KERNEL_DIR}
          RT_PATCH=${{ inputs.rt_patch }}
          if test -z $RT_PATCH; then $GITHUB_WORKSPACE/getpatch.sh `make kernelversion` > $HOME/rt_patch; else echo $RT_PATCH > $HOME/rt_patch; fi

      - name: Download and unzip RT patch, the closest to the RPI kernel version
        run: |
          cd $HOME/linux_build
          wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/`echo ${{ inputs.kernel_version }} | cut -d '.' -f 1-2`/older/patch-`cat $HOME/rt_patch`.patch.gz \
          && gunzip patch-`cat $HOME/rt_patch`.patch.gz

      - name: Download lttng source for use later
        run: |
          cd $HOME
          sudo apt-add-repository -s -y ppa:lttng/stable-${{ inputs.lttng_version }} \
          && sudo apt-get update \
          && apt-get source -y -q lttng-modules-dkms

      - name:  run lttng built-in script to configure RT kernel
        run: |
          cd $HOME \
          && cd `ls -d lttng-*/` \
          && ./scripts/built-in.sh ${HOME}/linux_build/${KERNEL_DIR}

      - name: Patch raspi kernel, do not fail if some patches are skipped
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && OUT="$(patch -p1 --forward < ../patch-`cat $HOME/rt_patch`.patch)" || echo "${OUT}" | grep "Skipping patch" -q || (echo "$OUT" && false);

      - name: Setup build environment
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && export $(dpkg-architecture -a${ARCH}) \
          && export CROSS_COMPILE=${triple}- \
          && fakeroot debian/rules clean \
          && LANG=C fakeroot debian/rules printenv

      - name: Config RT kernel and merge config fragment
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && cp $HOME/usr/lib/linux/`cat $HOME/uname_r`/config .config \
          && ARCH=${ARCH} CROSS_COMPILE=${triple}- ./scripts/kconfig/merge_config.sh .config $GITHUB_WORKSPACE/.config-fragment

      - name: Clean debian/rules
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && fakeroot debian/rules clean

      - name: Build kernel
        run: |
          cd $HOME/linux_build/${KERNEL_DIR} \
          && make ARCH=${ARCH} CROSS_COMPILE=${triple}- LOCALVERSION=-raspi -j `nproc` bindeb-pkg

      - uses: actions/upload-artifact@v2
        with:
          name: 'RPI4 RT Kernel deb packages'
          path: ~/linux_build/*.deb

